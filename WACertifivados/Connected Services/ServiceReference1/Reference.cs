//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WACertifivados.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICertificadoService")]
    public interface ICertificadoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertificadoService/GenerarCertificadoYClave", ReplyAction="http://tempuri.org/ICertificadoService/GenerarCertificadoYClaveResponse")]
        string GenerarCertificadoYClave(string nombreTitular, string rutaPfx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertificadoService/GenerarCertificadoYClave", ReplyAction="http://tempuri.org/ICertificadoService/GenerarCertificadoYClaveResponse")]
        System.Threading.Tasks.Task<string> GenerarCertificadoYClaveAsync(string nombreTitular, string rutaPfx);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertificadoService/GenerarCertificadoYClave2", ReplyAction="http://tempuri.org/ICertificadoService/GenerarCertificadoYClave2Response")]
        string GenerarCertificadoYClave2(string nombreTitular, string rutaPfx, string clave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICertificadoService/GenerarCertificadoYClave2", ReplyAction="http://tempuri.org/ICertificadoService/GenerarCertificadoYClave2Response")]
        System.Threading.Tasks.Task<string> GenerarCertificadoYClave2Async(string nombreTitular, string rutaPfx, string clave);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICertificadoServiceChannel : WACertifivados.ServiceReference1.ICertificadoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CertificadoServiceClient : System.ServiceModel.ClientBase<WACertifivados.ServiceReference1.ICertificadoService>, WACertifivados.ServiceReference1.ICertificadoService {
        
        public CertificadoServiceClient() {
        }
        
        public CertificadoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CertificadoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertificadoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertificadoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GenerarCertificadoYClave(string nombreTitular, string rutaPfx) {
            return base.Channel.GenerarCertificadoYClave(nombreTitular, rutaPfx);
        }
        
        public System.Threading.Tasks.Task<string> GenerarCertificadoYClaveAsync(string nombreTitular, string rutaPfx) {
            return base.Channel.GenerarCertificadoYClaveAsync(nombreTitular, rutaPfx);
        }
        
        public string GenerarCertificadoYClave2(string nombreTitular, string rutaPfx, string clave) {
            return base.Channel.GenerarCertificadoYClave2(nombreTitular, rutaPfx, clave);
        }
        
        public System.Threading.Tasks.Task<string> GenerarCertificadoYClave2Async(string nombreTitular, string rutaPfx, string clave) {
            return base.Channel.GenerarCertificadoYClave2Async(nombreTitular, rutaPfx, clave);
        }
    }
}
